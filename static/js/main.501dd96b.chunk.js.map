{"version":3,"sources":["styles/GlobalStyles.js","components/CitiesTable/styles.js","components/Card/styled.js","components/Card/index.js","components/ListOfCities/styles.js","components/ListOfCities/index.js","components/InputSearch/styles.js","components/InputSearch/index.js","components/CitiesTable/index.js","styles/HelperClasses.js","App.js","index.js"],"names":["ResetStyle","createGlobalStyle","GlobalStyle","Wrap","styled","section","Header","header","Main","main","ExtraField","div","ItemsCount","p","ClearButton","button","CardWrap","li","props","hoverStyle","css","checkedStyle","CityIcon","MdLocationCity","Name","IconClose","Card","useState","isChecked","setIsChecked","useEffect","checked","handleCheck","onCheck","selectedList","onClick","type","onChange","name","chineseName","onRemove","WrapList","ul","Loading","ListOfCities","cities","onSelect","onEndScroll","loading","onScroll","e","element","target","scrollHeight","scrollTop","clientHeight","handleScroll","map","city","i","key","SearchWrap","Input","input","attrs","GlassIcon","MdSearch","InputSearch","placeholder","value","CitiesTable","citiesDb","initialCities","setCities","setLoading","numberCities","setNumberCities","CheckboxEl","useRef","arrayCities","slice","hanldeSelectAll","current","length","regex","RegExp","filter","match","handleSearch","ref","id","htmlFor","className","every","handleSelect","number","setTimeout","newCities","handleDelete","generateSpaces","positions","prop","times","results","pos","push","HelperClasses","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.501dd96b.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const ResetStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, *:before, *:after {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body, h1, h2, h3, h4, h5, h6, p, ol, ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-weight: normal;\r\n  }\r\n\r\n  ol, ul {\r\n    list-style: none;\r\n  }\r\n\r\n  img {\r\n    max-width: 100%;\r\n    height: auto;\r\n  }\r\n`\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --light-grey: #e4e4e4;\r\n    --grey: #adadad;\r\n    --dark-grey: #333;\r\n    --light-blue: #d2e9ff;\r\n    --blue: #4A85BD;\r\n    --dark-blue: #0A68A8;\r\n    --wine: #C4515B;\r\n    --red: #b72330;\r\n  }\r\n  \r\n  html {\r\n    font-size: 62.5%;\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    min-width: 360px;\r\n    height: 100%;\r\n    min-height: 100%;\r\n    font-size: 1.4rem;\r\n    line-height: normal;\r\n    font-family: 'Open Sans', sans-serif;\r\n    color: var(--dark-grey);\r\n    background-image: linear-gradient(to top, #cfd9df 0%, #e2ebf0 100%);\r\n    \r\n  }\r\n\r\n  input, button {\r\n    font-family: 'Open Sans', sans-serif;\r\n  }\r\n\r\n  #app {\r\n    height: 100%;\r\n    min-height: 100%;\r\n    overflow: hidden;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 15px;\r\n  }\r\n\r\n  input[type=\"checkbox\"]{\r\n    cursor: pointer;\r\n    \r\n    & + label {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrap = styled.section`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: 0 1px 2px rgba(74, 74, 74, 0.1);\r\n`\r\n\r\nexport const Header = styled.header`\r\n  padding: 15px;\r\n  border-bottom: 1px solid var(--light-grey);\r\n\r\n  & > h1 {\r\n    font-size: 2.4rem;\r\n    font-weight: 700;\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nexport const Main = styled.main`\r\n  @media (min-width: 768px) {\r\n    display: flex;\r\n  }\r\n\r\n  & > div {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 400px;\r\n\r\n    &:last-child {\r\n      @media (max-width: 768px) {\r\n        border-top: 1px solid var(--light-grey);\r\n      }\r\n    }\r\n\r\n    :not(:last-child) {\r\n      border-right: 1px solid var(--light-grey);\r\n    }\r\n  }\r\n`\r\n\r\nexport const ExtraField = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 10px 10px 15px;\r\n  border-bottom: 1px solid var(--light-grey);\r\n  height: 45px;\r\n`\r\n\r\nexport const ItemsCount = styled.p`\r\n  font-weight: 700;\r\n  color: var(--grey);\r\n  font-size: 1.3rem;\r\n`\r\n\r\nexport const ClearButton = styled.button`\r\n  margin-left: auto;\r\n  font-weight: 700;\r\n  color: var(--blue);\r\n  transition: 0.3s all ease;\r\n  cursor: pointer;\r\n  font-size: 1.3rem;\r\n\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    color: var(--dark-blue);\r\n  }\r\n`\r\n","import styled, { css } from 'styled-components'\r\nimport { MdLocationCity } from 'react-icons/md'\r\n\r\nexport const CardWrap = styled.li`\r\n  padding: 10px 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid var(--light-grey);\r\n  transition: 0.2s all ease;\r\n\r\n  ${props =>\r\n    props.hoverStyle &&\r\n    css`\r\n      cursor: pointer;\r\n      &:hover {\r\n        background-color: var(--light-blue);\r\n      }\r\n    `}\r\n\r\n  ${props =>\r\n    props.checkedStyle &&\r\n    css`\r\n      background-color: var(--light-blue);\r\n      border-color: white;\r\n      cursor: pointer;\r\n    `}\r\n`\r\n\r\nexport const CityIcon = styled(MdLocationCity)`\r\n  font-size: 3.5rem;\r\n  background: linear-gradient(120deg, var(--blue) 50%, var(--dark-blue) 50%);\r\n  border-radius: 50%;\r\n  padding: 5px;\r\n  color: white;\r\n  margin: 0 10px;\r\n`\r\n\r\nexport const Name = styled.div`\r\n  flex: 1;\r\n\r\n  & > h3 {\r\n    font-size: 1.4rem;\r\n    font-weight: 700;\r\n  }\r\n\r\n  & > h4 {\r\n    font-size: 1.2rem;\r\n    color: var(--grey);\r\n  }\r\n`\r\n\r\nexport const IconClose = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  border: none;\r\n  background: none;\r\n\r\n  color: var(--wine);\r\n  font-size: 1.6rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  transition: all 0.2s ease;\r\n  padding: 0;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    color: var(--red);\r\n  }\r\n`\r\n","import React, { useState, useEffect } from 'react'\r\nimport { CardWrap, CityIcon, Name, IconClose } from './styled'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Card = props => {\r\n  const [isChecked, setIsChecked] = useState(false)\r\n  useEffect(() => {\r\n    setIsChecked(props.checked)\r\n  }, [props.checked])\r\n\r\n  const handleCheck = () => {\r\n    props.onCheck()\r\n    setIsChecked(isChecked)\r\n  }\r\n\r\n  return (\r\n    <CardWrap\r\n      hoverStyle={!props.selectedList && !props.checked}\r\n      checkedStyle={!props.selectedList && props.checked}\r\n      onClick={!props.selectedList ? handleCheck : null}\r\n    >\r\n      {!props.selectedList && <input type=\"checkbox\" checked={isChecked} onChange={handleCheck} />}\r\n\r\n      <CityIcon />\r\n      <Name>\r\n        <h3>{props.name}</h3>\r\n        <h4>{props.chineseName}</h4>\r\n      </Name>\r\n\r\n      {props.selectedList && <IconClose onClick={props.onRemove}>X</IconClose>}\r\n    </CardWrap>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  chineseName: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool.isRequired,\r\n  onCheck: PropTypes.func.isRequired,\r\n  selectedList: PropTypes.bool\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const WrapList = styled.ul`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 7px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background-color: var(--light-grey);\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: var(--grey);\r\n  }\r\n`\r\n\r\nexport const Loading = styled.div`\r\n  padding: 10px;\r\n  text-align: center;\r\n`\r\n","import React from 'react'\r\nimport { Card } from '../Card'\r\nimport { WrapList, Loading } from './styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const ListOfCities = ({ cities, onSelect, onRemove, selectedList, onEndScroll, loading }) => {\r\n  const handleScroll = e => {\r\n    let element = e.target\r\n    if (element.scrollHeight - element.scrollTop <= element.clientHeight) {\r\n      onEndScroll()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <WrapList onScroll={!selectedList ? e => handleScroll(e) : null}>\r\n      {cities.map((city, i) => (\r\n        <Card\r\n          checked={false}\r\n          key={i}\r\n          onCheck={() => onSelect(city)}\r\n          onRemove={() => onRemove(city)}\r\n          selectedList={selectedList}\r\n          {...city}\r\n        />\r\n      ))}\r\n      {loading && <Loading>Loading ...</Loading>}\r\n    </WrapList>\r\n  )\r\n}\r\n\r\nListOfCities.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelect: PropTypes.func,\r\n  onRemove: PropTypes.func,\r\n  selectedList: PropTypes.bool,\r\n  onEndScroll: PropTypes.func,\r\n  loading: PropTypes.bool\r\n}\r\n","import styled from 'styled-components'\r\nimport { MdSearch } from 'react-icons/md'\r\n\r\nexport const SearchWrap = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`\r\n\r\nexport const Input = styled.input.attrs({ type: 'search' })`\r\n  width: 100%;\r\n  padding: 3px 5px 3px 20px;\r\n\r\n  border: none;\r\n  border-bottom: 1px solid var(--grey);\r\n  transition: 0.3s all ease;\r\n  font-size: 1.3rem;\r\n\r\n  ::placeholder {\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-bottom: 1px solid var(--blue);\r\n  }\r\n`\r\n\r\nexport const GlassIcon = styled(MdSearch)`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 5px;\r\n`\r\n","import React from 'react'\r\nimport { SearchWrap, Input, GlassIcon } from './styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const InputSearch = ({ placeholder, onChange }) => {\r\n  return (\r\n    <SearchWrap>\r\n      <GlassIcon />\r\n      <Input placeholder={placeholder} onChange={e => onChange(e.target.value)} />\r\n    </SearchWrap>\r\n  )\r\n}\r\n\r\nInputSearch.propTypes = {\r\n  placeholder: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Wrap, Header, Main, ExtraField, ItemsCount, ClearButton } from './styles'\r\nimport { ListOfCities } from '../ListOfCities'\r\nimport { cities as citiesDb } from '../../api/cities-of-china.json'\r\nimport { InputSearch } from '../InputSearch'\r\n\r\nexport const CitiesTable = () => {\r\n  const [initialCities] = useState(citiesDb)\r\n  const [cities, setCities] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [numberCities, setNumberCities] = useState(20)\r\n  const CheckboxEl = useRef(null)\r\n\r\n  useEffect(() => {\r\n    const arrayCities = initialCities.map(e => ({ ...e, checked: false }))\r\n    setCities(arrayCities.slice(0, 20))\r\n  }, [initialCities])\r\n\r\n  /**\r\n   * Select city Function\r\n   * @param {string} city - The selected city\r\n   */\r\n\r\n  const handleSelect = city => {\r\n    const isChecked = !city.checked\r\n    const arrayCities = cities.map(e => (e.id === city.id ? { ...e, checked: isChecked } : e))\r\n    setCities(arrayCities)\r\n    CheckboxEl.current.checked = arrayCities.every(e => e.checked)\r\n  }\r\n\r\n  /**\r\n   * Remove city from selected items\r\n   * @param {string} city - The city to remove\r\n   */\r\n\r\n  const handleDelete = city => {\r\n    const arrayCities = cities.map(e => (e.id === city.id ? { ...e, checked: false } : e))\r\n    setCities(arrayCities)\r\n    CheckboxEl.current.checked = false\r\n  }\r\n\r\n  /**\r\n   * Select / deselect all cities\r\n   * @param {Boolean} isChecked - The boolean to select\r\n   */\r\n\r\n  const hanldeSelectAll = isChecked => {\r\n    const arrayCities = cities.map(e => ({ ...e, checked: isChecked }))\r\n    setCities(arrayCities)\r\n    CheckboxEl.current.checked = isChecked\r\n  }\r\n\r\n  /**\r\n   * Filter search function\r\n   * @param {String} name - String to filter\r\n   */\r\n\r\n  const handleSearch = name => {\r\n    if (name.length > 0) {\r\n      const regex = new RegExp(`^${name}`, 'i')\r\n      const arrayCities = cities.filter(e => e.name.match(regex))\r\n      setCities(arrayCities)\r\n    } else {\r\n      setCities(initialCities.slice(0, numberCities))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * More cities Function\r\n   * @param {Number} number - Number to set number of cities\r\n   */\r\n\r\n  const moreCities = number => {\r\n    setLoading(true)\r\n    setTimeout(() => {\r\n      const newCities = initialCities.slice(number, number + 20).map(e => ({ ...e, checked: false }))\r\n      const arrayCities = [...cities, ...newCities]\r\n      setCities(arrayCities)\r\n      setNumberCities(number)\r\n      setLoading(false)\r\n    }, 700)\r\n  }\r\n\r\n  return (\r\n    <Wrap>\r\n      <Header>\r\n        <h1>Cities of China</h1>\r\n      </Header>\r\n      <Main>\r\n        <div>\r\n          <ExtraField>\r\n            <InputSearch placeholder=\"Search by Name\" onChange={e => handleSearch(e)} />\r\n          </ExtraField>\r\n\r\n          <ExtraField>\r\n            <input\r\n              ref={CheckboxEl}\r\n              type=\"checkbox\"\r\n              id=\"selectAll\"\r\n              onChange={e => hanldeSelectAll(e.target.checked)}\r\n            />\r\n\r\n            <label htmlFor=\"selectAll\" className=\"margin-left-15 bold\">\r\n              {cities.slice(0, numberCities).length}\r\n              {cities.slice(0, numberCities).length === 1 ? ' item' : ' items'}\r\n            </label>\r\n          </ExtraField>\r\n\r\n          <ListOfCities\r\n            cities={cities.slice(0, numberCities)}\r\n            onSelect={city => handleSelect(city)}\r\n            onEndScroll={() => moreCities(numberCities + 20)}\r\n            loading={loading}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <ExtraField>\r\n            <ItemsCount>\r\n              {cities.filter(e => e.checked === true).length}\r\n              {cities.filter(e => e.checked === true).length === 1 ? ' item' : ' items'}\r\n            </ItemsCount>\r\n\r\n            {cities.filter(e => e.checked === true).length > 0 && (\r\n              <ClearButton onClick={() => hanldeSelectAll(false)}>CLEAR</ClearButton>\r\n            )}\r\n          </ExtraField>\r\n\r\n          <ListOfCities\r\n            cities={cities.filter(e => e.checked === true)}\r\n            selectedList\r\n            onRemove={city => handleDelete(city)}\r\n          />\r\n        </div>\r\n      </Main>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst generateSpaces = (positions, prop, times) => {\r\n  let results = []\r\n  for (let i = 0; i <= times; i++) {\r\n    for (const pos in positions) {\r\n      results.push(\r\n        `.${prop}${positions[pos]}-${(i + 1) * 5} { ${prop}${positions[pos]}: ${(i + 1) * 5}px }`\r\n      )\r\n    }\r\n  }\r\n  return results\r\n}\r\n\r\nexport const HelperClasses = createGlobalStyle`\r\n  ${generateSpaces(['', '-top', '-right', '-bottom', '-left'], 'margin', 5)}\r\n  ${generateSpaces(['', '-top', '-right', '-bottom', '-left'], 'padding', 5)}\r\n\r\n  .bold {\r\n    font-weight: 700;\r\n  }\r\n`\r\n","import React, { Fragment } from 'react'\nimport { ResetStyle, GlobalStyle } from './styles/GlobalStyles'\nimport { CitiesTable } from './components/CitiesTable'\nimport { HelperClasses } from './styles/HelperClasses'\n\nfunction App() {\n  return (\n    <Fragment>\n      <ResetStyle />\n      <GlobalStyle />\n      <HelperClasses />\n      <CitiesTable />\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('app'))\n"],"sourceRoot":""}